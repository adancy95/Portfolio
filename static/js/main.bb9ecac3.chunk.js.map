{"version":3,"sources":["Components/Landing.js","Components/NavBar.js","Components/AboutMe.js","Components/ProjectCard.js","Components/MyWork.js","Components/Contact.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Landing","className","src","alt","to","NavBar","AboutMe","id","ProjectCard","props","projectImage","title","rel","href","url","target","MyWork","Contact","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb9ecac3.chunk.js","sourcesContent":["import React from 'react';\nimport { HashLink as Link } from 'react-router-hash-link';\n\nconst Landing = () => {\n    return(\n        <div className=\"jumbotron\">\n            <div>\n                <img className=\"jumbotron-img\" src=\"/antheadshot.svg\" alt=\"Antquanique's headshot\"/>\n            </div>\n            <div className=\"jumbotron-text jumbotron-text-margin\">\n                <h1 className=\"jumbotron-text-margin\">Ant-quanique Dancy</h1>\n                <h4 className=\"jumbotron-text-margin\">[Ant-qua-nique Dan-cy] (noun)</h4>\n                <hr className=\"jumbotron-text-margin\"/>\n                <ol>\n                    <li className=\"jumbotron-text-margin\">AKA Ant (if you can't pronounce my first name)</li>\n                    <li className=\"jumbotron-text-margin\">The Ex QA Engineer turned developer who is passonate about breaking down complex problems, and solving those problems with code.</li>\n                </ol>\n                <Link className=\"jumbotron-btn\" to=\"/#contact\">Contact Me</Link>\n            </div>\n           \n        </div>\n    )\n}\n\nexport default Landing","import React from 'react';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nimport '../App.css'  \n\nconst NavBar = () => {\n    return(\n        <Router>\n            <header>\n                <nav className=\"nav-bar\">\n                 <NavLink className=\"nav-links nav-logo\" to=\"/\">Ant-quanique Dancy</NavLink>\n                    <ul className=\"nav-ul\" >\n                        <li>\n                            <NavLink className=\"nav-links\" to=\"/#aboutMe\">About Me</NavLink>\n                        </li>\n                        <li> \n                            <NavLink className=\"nav-links\" to=\"/#myWork\">My Work</NavLink>\n                        </li>\n                        <li>\n                            <NavLink className=\"nav-links nav-btn\" to=\"/#contact\">Contact Me</NavLink>\n                        </li>\n                    </ul>\n                </nav>\n            </header>\n        </Router>\n        \n    )\n}\n\nexport default NavBar","import React from 'react';\nimport {FaRegFileCode} from \"react-icons/fa\";\nimport { GiStoneCrafting } from \"react-icons/gi\";\nimport { GiBrain } from \"react-icons/gi\";\n\nconst AboutMe = () => {\n    return(\n        <section id=\"aboutMe\">\n            <h1 className=\"section-header\">About Me</h1>\n            <div className=\"aboutme\">\n                <div className=\"aboutme-section\">\n                    <FaRegFileCode className=\"icon\"/>\n                    <h3>Developer</h3>\n                    <p>I enjoy creating software solutions that solve people's pain points</p>\n                </div>\n                <div className=\"aboutme-section\">\n                    <GiBrain className=\"icon\"/>\n                    <h3>Problem Solver</h3>\n                    <p>I’m a developer who likes to experiment through trial and error</p>\n                </div>\n                <div className=\"aboutme-section\">\n                    <GiStoneCrafting className=\"icon\"/>\n                    <h3>Diyer</h3>\n                    <p>I’m a die hard diyer, and a pinterest fanatic who has a knack for making crafts.</p>\n                </div>\n            </div>\n           \n\n        </section>\n    )\n}\n\nexport default AboutMe","import React from 'react';\n\nconst ProjectCard = (props) => {\n    return(\n        <div className=\"card\">\n            <img src={props.projectImage} alt={props.title} className=\"card-image\" />\n            <div className=\"card-overlay\">\n                <div className=\"card-text\">\n                    <h2 className=\"project-title\"><a rel=\"noopener noreferrer\" href={props.url} target=\"_blank\">{props.title}</a></h2>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default ProjectCard","import React from 'react'\nimport ProjectCard from './ProjectCard'\n\nconst MyWork = () => {\n    return(\n        <section id=\"myWork\">\n            <h1 className=\"section-header\">My Work</h1>\n            <div className=\"my-works\">\n                <div className=\"works\">\n                    <ProjectCard title=\"Connect4\"  projectImage=\"/connect-4.png\" url=\"https://adancy95.github.io/Connect4\"/>            \n                </div>\n                <div className=\"works\">\n                    <ProjectCard title=\"daWeekly\"  projectImage=\"/daweekly.png\" url=\"https://da-weekly.herokuapp.com/\" />\n                </div>\n                <div className=\"works\">\n                    <ProjectCard title=\"MinaCre8s\"  projectImage=\"/mina.png\" url=\"http://minacre8s.herokuapp.com/\" />\n                </div>\n                <div className=\"works\">\n                    <ProjectCard title=\"Calculator\"  projectImage=\"/calculator.png\" url=\"https://adancy95.github.io/calculator/\" />\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default MyWork","import React from 'react'\nimport { FaGithub, FaLinkedinIn} from \"react-icons/fa\"\nimport { MdEmail } from \"react-icons/md\";\nconst Contact = () => {\n    return(\n       <section id=\"contact\">\n           <h1 className=\"section-header\">Contact Me</h1>\n           <ul className=\"contact\">\n               <li><a rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/adancy95/\" target=\"_blank\"><FaLinkedinIn className=\"icon\"/></a></li>\n               <li><a rel=\"noopener noreferrer\" href=\"https://github.com/adancy95\" target=\"_blank\"><FaGithub className=\"icon\"/></a></li>\n               <li><a rel=\"noopener noreferrer\" href=\"mailto:antdancy95@gmail.com\" target=\"_blank\"><MdEmail className=\"icon\"/></a></li>\n           </ul>\n       </section>\n    )\n}\n\nexport default Contact","import React from 'react';\n\nconst Footer = () => {\n    return(\n        <footer className=\"footer\">\n            <p>Ant-quanique Dancy</p>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react';\nimport Landing from './Components/Landing';\nimport NavBar from './Components/NavBar';\nimport AboutMe from './Components/AboutMe';\nimport MyWork from './Components/MyWork';\nimport Contact from './Components/Contact';\nimport Footer from './Components/Footer';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n      <div>\n        <NavBar/>\n        <Switch>\n          <Route exact path=\"/\" component={Landing}/>\n        </Switch>\n        <AboutMe/>\n        <MyWork/>\n        <Contact />\n        <Footer/>\n      </div>\n    </Router>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}